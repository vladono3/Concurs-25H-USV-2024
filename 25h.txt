To achieve your goal of connecting a temperature and humidity sensor, a microphone, and an LED to an ESP8266 and reading sensor data in real-time, you need to choose components that are compatible and have clear wiring. Here’s how you can proceed:

Components:
ESP8266 (e.g., NodeMCU or D1 Mini)
DHT11/DHT22 sensor (for temperature and humidity)
Analog microphone module (e.g., KY-037 or KY-038)
LED (with a suitable resistor, typically 220Ω)
Jumper wires and a breadboard.
Wiring Guide:
Sensor 1
DHT11/DHT22 (Temperature and Humidity Sensor):
VCC → 3.3V on the ESP8266
GND → GND on the ESP8266
Data → D5 (GPIO14) on the ESP8266
Add a 10kΩ pull-up resistor between Data and VCC.

Sensor 2
DHT11/DHT22 (Temperature and Humidity Sensor):
VCC → 3.3V on the ESP8266
GND → GND on the ESP8266
Data → D6 (GPIO14) on the ESP8266
Add a 10kΩ pull-up resistor between Data and VCC.


Microphone Module (KY-038):
VCC → 3.3V on the ESP8266
GND → GND on the ESP8266
Analog OUT (AO) → A0 (Analog input pin) on the ESP8266


LED 1:
Anode (longer leg) → D4 (GPIO2) on the ESP8266
Cathode (shorter leg) → Resistor → GND.
Arduino Code:
Here’s a complete code example:



LED 2:
Anode (longer leg) → D7 (GPIO2) on the ESP8266
Cathode (shorter leg) → Resistor → GND.
Arduino Code:
Here’s a complete code example:

#include <Adafruit_Sensor.h>
#include <Arduino.h>
#include <DHT.h>

#define DHTPIN1 14     // Pin connected to DHT11/DHT22 Data pin for Sensor 1
#define DHTTYPE1 DHT11 // Change to DHT22 if you're using it

#define DHTPIN2 12     // Pin connected to DHT11/DHT22 Data pin for Sensor 2
#define DHTTYPE2 DHT11 // Change to DHT22 if you're using it

#define MIC_PIN A0     // Microphone analog pin
#define LED_PIN1 4    // LED pin for Sensor 1
#define LED_PIN2 13     // LED pin for Sensor 2

// Reference value for calibration (adjust based on your setup)
const float REFERENCE_VALUE = 1; // Max value for a 10-bit ADC (0–1023)

// Threshold for noise level in dB
const float THRESHOLD_DB = 60.0; // Adjust as needed based on your environment

DHT dht1(DHTPIN1, DHTTYPE1);
DHT dht2(DHTPIN2, DHTTYPE2);

// Variables to track sensor states
bool complexSensor1Active = false;
bool complexSensor2Active = false;

void setup() {
  Serial.begin(115200);
  dht1.begin();
  dht2.begin();

  pinMode(LED_PIN1, OUTPUT); // Set LED pin for Sensor 1 as output
  pinMode(LED_PIN2, OUTPUT); // Set LED pin for Sensor 2 as output
  pinMode(MIC_PIN, INPUT);   // Set microphone pin as input

  Serial.println("ESP8266 Sensor Monitoring Starting...");
}

void loop() {
  // Check for serial input to toggle sensors
  if (Serial.available() > 0) {
    String command = Serial.readStringUntil('\n');
    command.trim(); // Remove any trailing newline or spaces

    if (command == "activate sensor 1") {
      complexSensor1Active = true;
      Serial.println("Sensor 1 activated.");
    } else if (command == "deactivate sensor 1") {
      complexSensor1Active = false;
      Serial.println("Sensor 1 deactivated.");
    } else if (command == "activate sensor 2") {
      complexSensor2Active = true;
      Serial.println("Sensor 2 activated.");
    } else if (command == "deactivate sensor 2") {
      complexSensor2Active = false;
      Serial.println("Sensor 2 deactivated.");
    } else if (command == "deactivate sensors") {
      complexSensor1Active = false;
      complexSensor2Active = false;
      Serial.println("All sensors deactivated.");
    }
  }

  // Process Sensor 1
  if (complexSensor1Active) {
    digitalWrite(LED_PIN1, HIGH); // Turn on LED for Sensor 1
    
    float temperature1 = dht1.readTemperature();
    float humidity1 = dht1.readHumidity();
    
    if (isnan(temperature1) || isnan(humidity1)) {
      Serial.println("Failed to read from DHT sensor 1!");
    } else {
      Serial.print("Sensor 1 - Temperature: ");
      Serial.print(temperature1);
      Serial.print("°C, Humidity: ");
      Serial.print(humidity1);
      Serial.println("%");
    }
  } else {
    digitalWrite(LED_PIN1, LOW); // Turn off LED for Sensor 1
  }

  // Process Sensor 2
  if (complexSensor2Active) {
    digitalWrite(LED_PIN2, HIGH); // Turn on LED for Sensor 2
    
    float temperature2 = dht2.readTemperature();
    float humidity2 = dht2.readHumidity();
    
    if (isnan(temperature2) || isnan(humidity2)) {
      Serial.println("Failed to read from DHT sensor 2!");
    } else {
      Serial.print("Sensor 2 - Temperature: ");
      Serial.print(temperature2);
      Serial.print("°C, Humidity: ");
      Serial.print(humidity2);
      Serial.println("%");
    }
  } else {
    digitalWrite(LED_PIN2, LOW); // Turn off LED for Sensor 2
  }

  // Read and print microphone data (active regardless of other sensors)
  int micValue = analogRead(MIC_PIN);
  float dB = 20 * log10(micValue / REFERENCE_VALUE);
  Serial.print("Sound Level (dB): ");
  Serial.println(dB);

  delay(1500); // Adjust delay as needed
}


ALTER SEQUENCE sensors_sequence RESTART WITH 1;


CREATE TABLE minute_data (
    id SERIAL PRIMARY KEY,
    sensor1 FLOAT[],
    sensor2 FLOAT[],
    sensor3 FLOAT[],
    sensor4 FLOAT[],
    sensor5 FLOAT[],
    noise ,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);



DO $$
DECLARE
    i INT;
BEGIN
    FOR i IN 0..1439 LOOP  -- 0 to 1439 represents 1440 minutes in a day
        INSERT INTO minute_data (id, sensor1, sensor2, sensor3, sensor4, sensor5, noise, timestamp)
        VALUES (
            i + 1,  -- id (1-based index)
            ARRAY[0.0, 0.0],  -- Placeholder array for sensor1
            ARRAY[0.0, 0.0],  -- Placeholder array for sensor2
            ARRAY[0.0, 0.0],  -- Placeholder array for sensor3
            ARRAY[0.0, 0.0],  -- Placeholder array for sensor4
            ARRAY[0.0, 0.0],  -- Placeholder array for sensor5
            0,  -- Placeholder array for noise
            CURRENT_DATE + INTERVAL '1 minute' * i
        );
    END LOOP;
END $$;



CREATE TABLE year_data (
    id SERIAL PRIMARY KEY,         -- Day of the year (1 to 365)
    sensor1 FLOAT[],               -- Array of FLOAT values for sensor 1
    sensor2 FLOAT[],               -- Array of FLOAT values for sensor 2
    sensor3 FLOAT[],               -- Array of FLOAT values for sensor 3
    sensor4 FLOAT[],               -- Array of FLOAT values for sensor 4
    sensor5 FLOAT[],               -- Array of FLOAT values for sensor 5
    noise INTEGER                  -- Integer value for noise
);



DO $$
BEGIN
    FOR i IN 1..365 LOOP
        INSERT INTO year_data (id, sensor1, sensor2, sensor3, sensor4, sensor5, noise)
        VALUES (
            i,
            ARRAY[0, 0],    -- Default for sensor1: [temperature, humidity]
            ARRAY[0, 0],    -- Default for sensor2
            ARRAY[0, 0],    -- Default for sensor3
            ARRAY[0, 0],    -- Default for sensor4
            ARRAY[0, 0],    -- Default for sensor5
            0                  -- Default for noise
        );
    END LOOP;
END $$;


import threading
import time
import os
import json
import serial
import openai
import ast
from datetime import datetime, timedelta
from fastapi import APIRouter, HTTPException, FastAPI
import psycopg2
from psycopg2 import pool
import atexit
from pydantic import BaseModel
from threading import Lock

class SensorCoordinates(BaseModel):
    lat: float
    lng: float

# Set your API key using environment variables
openai_secretkey = os.environ.get("CHAT_SECRET_KEY")
openai.api_key = os.environ.get("OPENAI_API_KEY", openai_secretkey)

# Initialize serial connection
ser = serial.Serial('COM9', 115200, timeout=1)

# Create a router for the sensors endpoint
sensors_router = APIRouter()

# Create a connection pool
db_pool = psycopg2.pool.SimpleConnectionPool(
    minconn=1,
    maxconn=10,  # Adjust as needed
    dbname=os.environ["dbname"],
    user=os.environ["user"],
    password=os.environ["password"],
    host=os.environ["host"],
    port=os.environ["port"]
)

# Persistent database connection
persistent_conn = None
conn_lock = Lock()

# Function to initialize a persistent connection
def init_db_connection():
    global persistent_conn
    with conn_lock:
        if not persistent_conn or persistent_conn.closed != 0:
            if persistent_conn:
                persistent_conn.close()
            persistent_conn = db_pool.getconn()

# Function to close all connections when the program exits
def close_db_pool():
    with conn_lock:
        if persistent_conn:
            persistent_conn.close()
        if db_pool:
            db_pool.closeall()

# Register the exit handler to close connections
atexit.register(close_db_pool)

# Initialize the persistent connection at startup
init_db_connection()

# Initialize the FastAPI app
app = FastAPI()

# Include the router
app.include_router(sensors_router)

@sensors_router.get("/sensors")
def get_sensors_position():
    try:
        with conn_lock:
            if persistent_conn.closed != 0:
                init_db_connection()  # Reconnect if necessary
            with persistent_conn.cursor() as cur:
                cur.execute("SELECT id, name, lat, lng FROM sensors")
                sensors = cur.fetchall()
                sensors_list = [{"id": row[0], "name": row[1], "lat": row[2], "lng": row[3]} for row in sensors]
        return {"sensors": sensors_list}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@sensors_router.get("/sensors/live")
def get_sensors_live():
    try:
        with conn_lock:
            if persistent_conn.closed != 0:
                init_db_connection()  # Reconnect if necessary
            with persistent_conn.cursor() as cur:
                now = datetime.now()
                current_minute = now.hour * 60 + now.minute
                cur.execute("SELECT sensor1 FROM minute_data WHERE id = %s;", (current_minute,))
                result = cur.fetchone()

                if result:
                    return {"sensor1": result}
                else:
                    return None
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@sensors_router.post("/sensors")
def create_sensor(data: SensorCoordinates):
    try:
        with conn_lock:
            if persistent_conn.closed != 0:
                init_db_connection()  # Reconnect if necessary
            with persistent_conn.cursor() as cur:
                cur.execute("SELECT nextval('sensors_sequence')")
                sensor_id = cur.fetchone()[0]
                sensor_name = f"Sensor {sensor_id}"

                cur.execute("""
                    INSERT INTO sensors (id, name, lat, lng)
                    VALUES (%s, %s, %s, %s)
                """, (sensor_id, sensor_name, data.lat, data.lng))

                if sensor_id <= 2:
                    sensor_command = f'activate sensor {sensor_id}'
                    ser.write(sensor_command.encode())

                persistent_conn.commit()

        return get_sensors_position()
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@sensors_router.get("/sensors/ai")
def get_sensor_position():
    try:
        with conn_lock:
            if persistent_conn.closed != 0:
                init_db_connection()  # Reconnect if necessary
            with persistent_conn.cursor() as cur:
                cur.execute("SELECT id, name, lat, lng FROM sensors")
                sensors = cur.fetchall()
                sensors_list = [{"id": row[0], "name": row[1], "lat": row[2], "lng": row[3]} for row in sensors]

        prompt = (f"Given the following sensors data placement on the Google Maps map{sensors_list}, "
                  "determine the future position for the next sensor placement on the map. "
                  "Respond with only a JSON object that includes the latitude, longitude, and the reason for choosing this position. "
                  "The JSON should be formatted like this:"
                  '{"lat": given_position, "lng": given_position, "reason": "a reason why you chose this"}')

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )

        response_text = response['choices'][0]['message']['content']
        response_dict = ast.literal_eval(response_text)

        returned_body = {
            "reason": response_dict["reason"],
            "lat": response_dict["lat"],
            "lng": response_dict["lng"]
        }

        return returned_body
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

def update_minute_data(json_data):
    try:
        with conn_lock:
            if persistent_conn.closed != 0:
                init_db_connection()  # Reconnect if necessary
            with persistent_conn.cursor() as cur:
                now = datetime.now()
                minute_of_day = now.hour * 60 + now.minute

                sensor1_temp = json_data["sensor 1"]["temperature"]
                sensor1_humidity = json_data["sensor 1"]["humidity"]
                noise = json_data["noise"]

                cur.execute("""
                    UPDATE minute_data
                    SET sensor1 = ARRAY[%s, %s]::FLOAT[],
                        noise = %s
                    WHERE id = %s
                """, (sensor1_temp, sensor1_humidity, noise, minute_of_day))
                persistent_conn.commit()
    except Exception as e:
        print("Error updating minute_data:", str(e))

def listen_for_json():
    last_update = datetime.now()
    update_interval = timedelta(seconds=5)

    while True:
        if ser.in_waiting > 0:
            data = ser.readline().decode('utf-8').strip()
            if data:
                try:
                    json_data = json.loads(data)
                    if datetime.now() - last_update >= update_interval:
                        update_minute_data(json_data)
                        last_update = datetime.now()
                except json.JSONDecodeError:
                    print("Received data is not valid JSON:", data)
        time.sleep(0.1)

listener_thread = threading.Thread(target=listen_for_json, daemon=True)
listener_thread.start()

@sensors_router.get("/reports/daily")
def get_daily_reports():
    try:
        with conn_lock:
            if persistent_conn.closed != 0:
                init_db_connection()  # Reconnect if necessary
            with persistent_conn.cursor() as cur:
                today = datetime.now()
                first_day_of_month = today.replace(day=1)
                start_date = max(first_day_of_month, today - timedelta(days=7))
                start_day_of_year = start_date.timetuple().tm_yday
                end_day_of_year = today.timetuple().tm_yday

                cur.execute("""
                    SELECT id, sensor1, sensor2, sensor3, sensor4, sensor5
                    FROM year_data
                    WHERE id BETWEEN %s AND %s
                    ORDER BY id ASC;
                """, (start_day_of_year, end_day_of_year))

                rows = cur.fetchall()
                data = []

                for row in rows:
                    day_of_year = row[0]
                    date_for_day = datetime(datetime.now().year, 1, 1) + timedelta(days=day_of_year - 1)
                    formatted_date = date_for_day.strftime("%d.%m.%Y")

                    data.append({
                        "day_of_year": formatted_date,
                        "sensors": [row[1:]]
                    })

        return data
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@sensors_router.get("/reports/monthly")
def get_monthly_reports():
    try:
        with conn_lock:
            if persistent_conn.closed != 0:
                init_db_connection()  # Reconnect if necessary
            with persistent_conn.cursor() as cur:
                current_year = datetime.now().year

                cur.execute("""
                    SELECT 
                        TO_CHAR(date_trunc('month', (DATE '2024-01-01' + (id - 1) * INTERVAL '1 day')), 'YYYY-MM') AS month,
                        AVG(sensor1[1]) AS avg_sensor1_temp,
                        AVG(sensor1[2]) AS avg_sensor1_humidity,
                        AVG(sensor1[3]) AS avg_sensor1_noise,
                        AVG(sensor1[4]) AS avg_sensor1_air_quality,
                        AVG(sensor2[1]) AS avg_sensor2_temp,
                        AVG(sensor2[2]) AS avg_sensor2_humidity,
                        AVG(sensor2[3]) AS avg_sensor2_noise,
                        AVG(sensor2[4]) AS avg_sensor2_air_quality,
                        AVG(sensor3[1]) AS avg_sensor3_temp,
                        AVG(sensor3[2]) AS avg_sensor3_humidity,
                        AVG(sensor3[3]) AS avg_sensor3_noise,
                        AVG(sensor3[4]) AS avg_sensor3_air_quality,
                        AVG(sensor4[1]) AS avg_sensor4_temp,
                        AVG(sensor4[2]) AS avg_sensor4_humidity,
                        AVG(sensor4[3]) AS avg_sensor4_noise,
                        AVG(sensor4[4]) AS avg_sensor4_air_quality,
                        AVG(sensor5[1]) AS avg_sensor5_temp,
                        AVG(sensor5[2]) AS avg_sensor5_humidity,
                        AVG(sensor5[3]) AS avg_sensor5_noise,
                        AVG(sensor5[4]) AS avg_sensor5_air_quality
                    FROM year_data
                    WHERE id BETWEEN 1 AND 365
                    GROUP BY month;
                """)
                rows = cur.fetchall()

        return rows
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# Start the FastAPI application
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)







